1. For query classification:
   a. How many unique categories did you see in your rolled up training
      data when you set the minimum number of queries per category to 100?
      To 1000?
         Out of an original 1486 categories assigned to queries, I found:
            970 categories assigned to queries after rolling up to at least
                100 queries per category, and
            478 categories assigned to queries after rolling up to at least
                1000 queries per category.
   b. What values did you achieve for P@1, R@3, R@5?  You should have tried
      at least a few different models, varying the minimum number of
      queries per category as well as trying different fastText parameters
      or query normalization.  Report at least 3 of your runs.
         I found increasing the learning rate (lr) and number of epochs too
         much made things worse.  I also found that while normalization
         improved things, it did not make as much difference as I thought
         it would.
         With the default parameters and arguments given in generate.sh:
            prec@1:  0.5684
            rec @1:  0.5684
            prec@3:  0.2537
            rec @3:  0.7611
            prec@5:  0.1651
            rec @5:  0.8254
	 Same as the default generate.sh, but with normalization disabled
	 (normalize() method in normalizer.py modified to return s without
	 doing anything to it):
            prec@1:  0.5599
            rec @1:  0.5599
            prec@3:  0.2524
            rec @3:  0.7572
            prec@5:  0.1644
            rec @5:  0.8221
	 Same as the default generate.sh, but with no modifications to
	 default parameters in the fasttext.train_supervised() line in
	 createModel.py:
	    prec@1:  0.5571
            rec @1:  0.5571
            prec@3:  0.2497
            rec @3:  0.7491
            prec@5:  0.1629
            rec @5:  0.8144
         Same as the default generate.sh, but with lr=0.9, epoch=20,
         wordNgrams=2 in the fasttext.train_supervised() line in
         createModel.py:
            prec@1:  0.4877
            rec @1:  0.4877
            prec@3:  0.1626
            rec @3:  0.4878
            prec@5:  0.1031
            rec @5:  0.5157
2. For integrating query classification with search:
   a. Give 2 or 3 examples of queries where you saw a dramatic positive
      change in the results becauseof filtering.  Make sure to include the
      classifier output for those queries.
	 1) Searching for ``ipad'', ranking by price (descending), got a
	    lot of results for Adobe Creative Suite, iPad docking stations,
	    and other things, without category filtering.  With category
	    filtering, the results were largely tablets, with iPads
	    featuring near the top.
	    The top classifier outputs were (routed through
	    leavesToPaths.py):
	       pcmcat209000050007
	          Best Buy > Computers & Tablets > Tablets & iPad > iPad
	       pcmcat209000050008
	          Best Buy > Computers & Tablets > Tablets & iPad > Tablets
	       pcmcat218000050000
	          Best Buy > Computers & Tablets > Tablets & iPad > iPad Accessories > iPad Cases, Covers & Sleeves
	       pcmcat218000050003
	          Best Buy > Computers & Tablets > Tablets & iPad > iPad Accessories > iPad Screen Protection
	       abcat0208011
	          Best Buy > Audio & MP3 > Home Audio > Speakers > iPod & MP3 Speakers, Docks & Radios
	       pcmcat242000050003
	          Best Buy > Computers & Tablets > Tablets & iPad > Tablet Accessories > Tablet Docks, Keyboards & Stands
	       pcmcat193100050014
                  Best Buy > Computers & Tablets > E-Readers > E-Reader Devices
	       pcmcat144700050004
                  Best Buy > Audio & MP3 > Headphones > All Headphones
	       pcmcat247400050000
                  Best Buy > Computers & Tablets > Laptop & Netbook Computers > PC Laptops
	       pcmcat218000050002
                  Best Buy > Computers & Tablets > Tablets & iPad > iPad Accessories > iPad Cables, Chargers & Adapters
	 2) Searching for ``amazon kindle'', ranking by popularity
	    (descending) returned a lot of CDs with ``Kind'' or ``Amazon''
	    in the title (not too surprisingly), when performed without the
	    category filter.  With the category filter, the top of the
	    search resutls were Kindle keyboards, followed by Kindles.
	    The top classifier outputs were (routed through
	    leavesToPaths.py):
	       pcmcat193100050014
	          Best Buy > Computers & Tablets > E-Readers > E-Reader Devices
   b. Given 2 or 3 examples of queries where filtering hurt the results,
      either because the classifier was wrong or for some other reason.
      Again, include the classifier output for those queries.
         I did not play with this much, but did not see any particularly
         obvious bad categorizations.
